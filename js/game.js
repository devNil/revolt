// Generated by CoffeeScript 1.4.0
(function() {
  var $, Archer, BadArcher, BadWarrior, CODE, Camera, CloneEntry, CloneMenu, Entity, EntityModel, Game, InputHandler, Key, Level, LevelGenerator, List, Loader, Map, MapGenerator, Model, Screen, SimpleImageLoader, SimpleJSONLoader, SpriteSheet, Storage, TestLevel, Text, Tower, TowerGenerator, Warrior,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Level = (function() {

    function Level(id) {
      this.id = id;
      console.log("INIT TestLevel");
      this.initPhysics();
      this.initGfx();
      this.entities = new List();
      this.totalentitys = 0;
      this.screen = new Screen(this.id, STORAGE.getRessource("spritesheet"));
    }

    Level.prototype.initGfx = function() {
      this.canvas = document.getElementById(this.id);
      this.ctx = this.canvas.getContext("2d");
      this.ctx.canvas.width = WIDTH;
      this.ctx.canvas.height = HEIGHT;
      this.ctx.webkitImageSmoothingEnabled = false;
      return this.ctx.mozImageSmoothingEnabled = false;
    };

    Level.prototype.initPhysics = function() {
      var contactListener, debugDraw;
      this.world = new b2World(new b2Vec2(0, 10), true);
      debugDraw = new b2DebugDraw();
      debugDraw.SetSprite(document.getElementById(this.id).getContext("2d"));
      debugDraw.SetDrawScale(30);
      debugDraw.SetFillAlpha(0.8);
      debugDraw.SetAlpha(1);
      debugDraw.SetLineThickness(1.0);
      debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
      this.world.SetDebugDraw(debugDraw);
      contactListener = new Box2D.Dynamics.b2ContactListener();
      contactListener.BeginContact = this.beginContact;
      return this.world.SetContactListener(contactListener);
    };

    Level.prototype.getWorld = function() {
      return this.world;
    };

    Level.prototype.tick = function() {
      var body, e, i, m, _i, _j, _ref, _ref1, _results;
      this.world.Step(1 / 60, 10, 10);
      this.world.ClearForces();
      body = this.world.GetBodyList();
      while ((body = body.GetNext()) !== null) {
        if (body.UserData instanceof Entity) {
          if (body.UserData.hasDied()) {
            this.world.DestroyBody(body);
          }
        }
      }
      for (i = _i = 0, _ref = this.entities.size(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (typeof this.entities.get(i) !== 'undefined') {
          if (this.entities.get(i).getUserData().hasDied()) {
            if (this.entities.get(i).getUserData() instanceof BadWarrior) {
              this.clonepoints++;
            }
            if (this.entities.get(i).getUserData() instanceof Warrior || this.entities.get(i).getUserData() instanceof Archer) {
              this.totalentitys--;
            }
            this.entities.del(i);
          }
        }
      }
      console.log(this.totalentitys);
      _results = [];
      for (i = _j = 0, _ref1 = this.entities.size(); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        m = this.entities.get(i);
        e = this.entities.get(i).getUserData();
        m.setStopped(e.hasStopped());
        if (m.hasStopped() === false) {
          m.tick();
        }
        e.tick();
        e.setX(m.getScreenX());
        e.setY(m.getScreenY());
        _results.push(m.wakeUp());
      }
      return _results;
    };

    Level.prototype.beginContact = function(contact, manifold) {};

    Level.prototype.draw = function(xOffset, yOffset) {
      var i, _i, _ref;
      this.ctx.clearRect(0, 0, WIDTH, HEIGHT);
      this.ctx.drawImage(this.level.background, xOffset, yOffset, 128, 128, 0, 0, 640, 480);
      this.screen.clear();
      for (i = _i = 0, _ref = this.entities.size(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.entities.get(i).getUserData().render(this.screen);
      }
      return this.screen.draw();
    };

    return Level;

  })();

  TestLevel = (function(_super) {

    __extends(TestLevel, _super);

    function TestLevel(id, json, camera, game) {
      var body, btn, i, _i, _ref;
      this.id = id;
      this.camera = camera;
      this.game = game;
      this.click = __bind(this.click, this);

      TestLevel.__super__.constructor.call(this, this.id);
      this.level = new LevelGenerator(json, STORAGE.getRessource("spritesheet"), this.world);
      this.clonepoints = 10;
      this.badWarriors = 20;
      this.badArchers = 5;
      this.tickcount = 0;
      this.cloneMenu = new CloneMenu();
      btn = document.getElementsByClassName(".btn");
      for (i = _i = 0, _ref = btn.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        $(btn[i]).click(this.click);
      }
      body = this.world.GetBodyList();
      if (body.UserData === "Tower") {
        this.towerbody = body;
      }
      while ((body = body.GetNext()) !== null) {
        if (body.UserData === "Tower") {
          this.towerbody = body;
        }
      }
      this.tower = new Tower(10, new TowerGenerator(STORAGE.getRessource("towermodel")).getTowerModel());
      this.towerbody.UserData = this.tower;
    }

    TestLevel.prototype.tick = function() {
      var e;
      TestLevel.__super__.tick.call(this);
      if (this.totalentitys === 0 && this.clonepoints === 0) {
        this.game.lose();
      }
      this.tickcount++;
      if (this.tickcount % 30 === 0) {
        this.badWarriors--;
        this.badArchers--;
        if (this.badWarriors >= 0) {
          e = new EntityModel(this.world, 800 - this.camera.getXoffset(), 180, 24, -1.5, 0x04, 0x01 | 0x02 | 0x08);
          e.setUserData(new BadWarrior());
          this.entities.add(e);
        }
        if (this.badArchers >= 0) {
          e = new EntityModel(this.world, 800 - this.camera.getXoffset(), 180, 24, -2, 0x04, 0x01 | 0x02 | 0x08);
          e.setUserData(new BadArcher());
          this.entities.add(e);
        }
      }
      if (!this.tower.hasDied()) {
        this.tower.setX(this.towerbody.GetPosition().x * 30);
        this.tower.setY((this.towerbody.GetPosition().y) * 30 + 10);
      }
      if (this.tower.hasDied()) {
        this.game.win();
      }
      return this.cloneMenu.setTotal(this.clonepoints);
    };

    TestLevel.prototype.draw = function(xOffset, yOffset) {
      TestLevel.__super__.draw.call(this, xOffset, yOffset);
      if (!this.tower.hasDied()) {
        return this.tower.render(this.ctx);
      }
    };

    TestLevel.prototype.click = function(e) {
      var ent;
      if (!this.game.running) {
        this.game.running = true;
        this.game.run();
      }
      ent = e.srcElement.attributes.entity.value;
      console.log(this.clonepoints !== 0);
      if (this.clonepoints !== 0) {
        if (ent === "archer") {
          this.clonepoints--;
          this.cloneMenu.setTotal(this.clonepoints);
          e = new EntityModel(this.world, 2 - this.camera.getXoffset() - 12, 30, 200, 2, 0x02, 0x01 | 0x04 | 0x08);
          e.setUserData(new Archer());
          this.entities.add(e);
          this.totalentitys++;
        }
        if (ent === "warrior") {
          this.clonepoints--;
          this.cloneMenu.setTotal(this.clonepoints);
          e = new EntityModel(this.world, 2 - this.camera.getXoffset() - 12, 30, 24, 1.5, 0x02, 0x01 | 0x04 | 0x08);
          e.setUserData(new Warrior());
          this.entities.add(e);
          return this.totalentitys++;
        }
      }
    };

    TestLevel.prototype.beginContact = function(contact, manifold) {
      var entity1, entity2;
      entity1 = contact.GetFixtureA().GetBody().UserData;
      entity2 = contact.GetFixtureB().GetBody().UserData;
      if (entity2 instanceof Tower) {
        entity1.collide(entity2);
      }
      if (entity2 instanceof Entity && entity1 instanceof Entity) {
        entity1.collide(entity2);
        return entity2.collide(entity1);
      }
    };

    return TestLevel;

  })(Level);

  Text = (function() {
    var chooseColor, color;

    chooseColor = "#DDD";

    color = "#722714";

    function Text(value, x, y, actual) {
      this.value = value;
      this.x = x;
      this.y = y;
      this.actual = actual;
    }

    Text.prototype.draw = function(ctx) {
      ctx.fillStyle = this.actual ? chooseColor : color;
      return ctx.fillText(this.value, this.x, this.y);
    };

    return Text;

  })();

  Map = (function() {

    function Map(id, game, inputHandler) {
      this.id = id;
      this.game = game;
      this.inputHandler = inputHandler;
      console.log("INIT Map");
      this.active = false;
      this.actualText = 0;
      this["do"] = 0;
      this.texts = [new Text("TestMap 1", 16 * 4, (16 * 4) - 4, true), new Text("TestMap 2", 6 * 8 * 4, (8 * 13 * 4) + 4, false), new Text("Level 3", 11 * 8 * 4, (8 * 2 * 4) - 4, false), new Text("Final", 15 * 8 * 4, (12 * 8 * 4) - 4, false)];
      this.canvas = document.getElementById(this.id);
      this.canvas.width = WIDTH;
      this.canvas.height = HEIGHT;
      this.ctx = this.canvas.getContext("2d");
      this.ctx.webkitImageSmoothingEnabled = false;
      this.ctx.mozImageSmoothingEnabled = false;
      this.ctx.font = "bold 36px Arial";
      this.ctx.fillStyle = "#FFF";
      this.mapgen = new MapGenerator(STORAGE.getRessource("map"), STORAGE.getRessource("spritesheet"));
    }

    Map.prototype.tick = function() {
      if (this.active === true) {
        if (this.inputHandler.RIGHT.isPressed()) {
          if (this.actualText < 3) {
            this["do"] = 1;
          }
        } else {
          if (this["do"] === 1) {
            this.texts[this.actualText].actual = false;
            this.actualText += this["do"];
            this.texts[this.actualText].actual = true;
            this["do"] = 0;
          }
        }
        if (this.inputHandler.LEFT.isPressed()) {
          if (this.actualText > 0) {
            this["do"] = -1;
          }
        } else {
          if (this["do"] === -1) {
            this.texts[this.actualText].actual = false;
            this.actualText += this["do"];
            this.texts[this.actualText].actual = true;
            this["do"] = 0;
          }
        }
        if (this.inputHandler.ESC.isPressed()) {
          impress().goto("start");
        }
        if (this.inputHandler.ENTER.isPressed()) {
          return this.game.loadLevel(this.actualText);
        }
      }
    };

    Map.prototype.isActive = function() {
      return this.active;
    };

    Map.prototype.setActive = function(active) {
      return this.active = active;
    };

    Map.prototype.draw = function() {
      var text, _i, _len, _ref, _results;
      this.ctx.drawImage(this.mapgen.background, 0, 0, 640, 480);
      _ref = this.texts;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        text = _ref[_i];
        _results.push(text.draw(this.ctx));
      }
      return _results;
    };

    return Map;

  })();

  CloneEntry = (function() {

    function CloneEntry(id, name, startPoints) {
      this.id = id;
      this.name = name;
      this.startPoints = startPoints;
      this.points = this.startPoints;
      this.div = document.getElementById(this.name);
    }

    CloneEntry.prototype.getPoints = function() {
      return this.points;
    };

    CloneEntry.prototype.addPoint = function() {
      return this.points = this.points + 1;
    };

    CloneEntry.prototype.removePoint = function() {
      return this.points = this.points - 1;
    };

    CloneEntry.prototype.tick = function() {
      return this.div = this.points;
    };

    return CloneEntry;

  })();

  CloneMenu = (function() {

    function CloneMenu() {
      this.base = document.getElementById("cloneMenu");
      this.total = document.getElementById("total");
    }

    CloneMenu.prototype.setTotal = function(points) {
      return this.total.innerText = points;
    };

    return CloneMenu;

  })();

  $ = Zepto;

  $(function() {
    var game, il, jl;
    this.b2Vec2 = Box2D.Common.Math.b2Vec2;
    this.b2BodyDef = Box2D.Dynamics.b2BodyDef;
    this.b2Body = Box2D.Dynamics.b2Body;
    this.b2FixtureDef = Box2D.Dynamics.b2FixtureDef;
    this.b2Fixture = Box2D.Dynamics.b2Fixture;
    this.b2World = Box2D.Dynamics.b2World;
    this.b2MassData = Box2D.Collision.Shapes.b2MassData;
    this.b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;
    this.b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;
    this.b2DebugDraw = Box2D.Dynamics.b2DebugDraw;
    this.WIDTH = 640.0;
    this.HEIGHT = 480.0;
    this.SCALE = 30;
    this.STORAGE = new Storage();
    il = SimpleImageLoader;
    jl = SimpleJSONLoader;
    STORAGE.register(new il("img/sprites.png", "spritesheet"), new jl("level/test.json", "test"), new jl("level/level2.json", "test2"), new jl("img/towermodel.json", "towermodel"));
    game = new Game();
    return this.STORAGE.setOnFinish(game.init);
  });

  Game = (function() {

    function Game() {
      this.run = __bind(this.run, this);

      this.init = __bind(this.init, this);
      console.log("CREATE Game");
      this.scale = 30;
    }

    Game.prototype.init = function() {
      var debugDraw;
      console.log("INIT Game");
      this.running = false;
      this.world = new b2World(new b2Vec2(0, 10), true);
      debugDraw = new b2DebugDraw();
      debugDraw.SetSprite(document.getElementById("board").getContext("2d"));
      debugDraw.SetDrawScale(this.scale);
      debugDraw.SetFillAlpha(0.8);
      debugDraw.SetAlpha(1);
      debugDraw.SetLineThickness(1.0);
      debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
      this.world.SetDebugDraw(debugDraw);
      this.screen = new Screen("board", STORAGE.getRessource("spritesheet"));
      this.inputHandler = new InputHandler;
      this.camera = new Camera('undefined', 30, 5, this.inputHandler);
      this.level = new TestLevel("board", STORAGE.getRessource("test"), this.camera, this);
      this.camera.setWorld(this.level.getWorld());
      return this.camera.setActive(true);
    };

    Game.prototype.loadLevel = function(index) {
      this.level = this.levels[index];
      return impress().goto("game");
    };

    Game.prototype.win = function() {
      this.running = false;
      return impress().goto("won");
    };

    Game.prototype.lose = function() {
      this.running = false;
      return impress().goto("lost");
    };

    Game.prototype.run = function() {
      if (this.running) {
        this.tick();
      }
      if (this.running) {
        this.render();
      }
      if (this.running) {
        return window.requestAnimFrame(this.run);
      }
    };

    Game.prototype.tick = function() {
      if (this.level != null) {
        this.level.tick();
      }
      if (this.camera.isActive()) {
        return this.camera.tick();
      }
    };

    Game.prototype.render = function() {
      if (this.level != null) {
        return this.level.draw(this.camera.getXoffset(), 0);
      }
    };

    return Game;

  })();

  Entity = (function() {

    function Entity() {
      this.died = false;
    }

    Entity.prototype.render = function(screen) {};

    Entity.prototype.tick = function() {};

    Entity.prototype.setX = function(x) {
      this.x = x;
    };

    Entity.prototype.setY = function(y) {
      this.y = y;
    };

    Entity.prototype.hurt = function(damage) {
      this.hp -= damage;
      if (this.hp <= 0) {
        return this.die();
      }
    };

    Entity.prototype.collide = function(entity) {};

    Entity.prototype.hasDied = function() {
      return this.died;
    };

    Entity.prototype.die = function() {
      return this.died = true;
    };

    Entity.prototype.hasStopped = function() {
      return this.stop;
    };

    return Entity;

  })();

  Tower = (function(_super) {

    __extends(Tower, _super);

    function Tower(hp, img) {
      this.hp = hp;
      this.img = img;
      Tower.__super__.constructor.apply(this, arguments);
    }

    Tower.prototype.render = function(ctx) {
      return ctx.drawImage(this.img, this.x, this.y);
    };

    return Tower;

  })(Entity);

  Archer = (function(_super) {

    __extends(Archer, _super);

    function Archer() {
      Archer.__super__.constructor.call(this);
      this.tile = 16;
      this.stop = false;
      this.ap = 3;
      this.hp = 2;
      this.tickcount = 0;
    }

    Archer.prototype.collide = function(entity) {
      if (entity instanceof Entity && !(entity instanceof Warrior) && !(entity instanceof Archer)) {
        this.tickcount = 0;
        entity.hurt(this.ap);
        this.attackE = entity;
        return this.stop = true;
      }
    };

    Archer.prototype.render = function(screen) {
      return screen.render(this.x, this.y, this.tile);
    };

    Archer.prototype.tick = function() {
      this.tickcount++;
      if (this.attackE != null) {
        if (this.attackE.hasDied()) {
          this.stop = false;
          this.attackE = null;
        }
        if (this.tickcount % 60 === 0 && (this.attackE != null)) {
          return this.attackE.hurt(this.ap);
        }
      }
    };

    return Archer;

  })(Entity);

  Warrior = (function(_super) {

    __extends(Warrior, _super);

    function Warrior() {
      Warrior.__super__.constructor.call(this);
      this.tile = 17;
      this.stop = false;
      this.ap = 2;
      this.hp = 4;
      this.tickcount = 0;
    }

    Warrior.prototype.collide = function(entity) {
      if (entity instanceof Entity && !(entity instanceof Warrior) && !(entity instanceof Archer)) {
        console.log("colided");
        this.tickcount = 0;
        entity.hurt(this.ap);
        this.attackE = entity;
        this.stop = true;
        return console.log(this.stop);
      }
    };

    Warrior.prototype.render = function(screen) {
      return screen.render(this.x, this.y, this.tile);
    };

    Warrior.prototype.tick = function() {
      this.tickcount++;
      if (this.attackE != null) {
        if (this.attackE.hasDied()) {
          this.stop = false;
          this.attackE = null;
        }
        if (this.tickcount % 60 === 0 && (this.attackE != null)) {
          return this.attackE.hurt(this.ap);
        }
      }
    };

    return Warrior;

  })(Entity);

  BadWarrior = (function(_super) {

    __extends(BadWarrior, _super);

    function BadWarrior() {
      BadWarrior.__super__.constructor.call(this);
      this.tile = 19;
      this.stop = false;
      this.ap = 2;
      this.hp = 4;
      this.tickcount = 0;
    }

    BadWarrior.prototype.collide = function(entity) {
      if (entity instanceof Entity && !(entity instanceof BadWarrior) && !(entity instanceof BadArcher)) {
        this.tickcount = 0;
        entity.hurt(this.ap);
        this.attackE = entity;
        this.stop = true;
        return console.log(this.stop);
      }
    };

    BadWarrior.prototype.render = function(screen) {
      return screen.render(this.x, this.y, this.tile);
    };

    BadWarrior.prototype.tick = function() {
      this.tickcount++;
      if (this.attackE != null) {
        if (this.attackE.hasDied()) {
          this.stop = false;
          this.attackE = null;
        }
        if (this.tickcount % 60 === 0 && (this.attackE != null)) {
          return this.attackE.hurt(this.ap);
        }
      }
    };

    return BadWarrior;

  })(Entity);

  BadArcher = (function(_super) {

    __extends(BadArcher, _super);

    function BadArcher() {
      BadArcher.__super__.constructor.call(this);
      this.tile = 18;
      this.stop = false;
      this.ap = 3;
      this.hp = 2;
      this.tickcount = 0;
    }

    BadArcher.prototype.collide = function(entity) {
      if (entity instanceof Entity && !(entity instanceof BadWarrior) && !(entity instanceof BadArcher)) {
        this.tickcount = 0;
        entity.hurt(this.ap);
        this.attackE = entity;
        this.stop = true;
        return console.log(this.stop);
      }
    };

    BadArcher.prototype.render = function(screen) {
      return screen.render(this.x, this.y, this.tile);
    };

    BadArcher.prototype.tick = function() {
      this.tickcount++;
      if (this.attackE != null) {
        if (this.attackE.hasDied()) {
          this.stop = false;
          this.attackE = null;
        }
        if (this.tickcount % 60 === 0 && (this.attackE != null)) {
          return this.attackE.hurt(this.ap);
        }
      }
    };

    return BadArcher;

  })(Entity);

  Model = (function() {

    function Model(world) {
      this.world = world;
    }

    Model.prototype.getX = function() {
      return this.body.GetPosition().x;
    };

    Model.prototype.getY = function() {
      return this.body.GetPosition().y;
    };

    Model.prototype.setPosition = function(x, y) {
      return this.body.SetPosition(new b2Vec2(x, y), 0);
    };

    Model.prototype.getBody = function() {
      return this.body;
    };

    Model.prototype.setUserData = function(data) {
      return this.body.UserData = data;
    };

    Model.prototype.getUserData = function() {
      return this.body.UserData;
    };

    Model.prototype.setStopped = function(stopped) {
      this.stopped = stopped;
    };

    Model.prototype.hasStopped = function() {
      return this.stopped;
    };

    return Model;

  })();

  EntityModel = (function(_super) {

    __extends(EntityModel, _super);

    function EntityModel(world, x, y, seewidth, speed, category, mask) {
      var bodyDef, fixDef, sensorDef;
      this.world = world;
      this.x = x;
      this.y = y;
      this.seewidth = seewidth;
      this.speed = speed;
      this.category = category;
      this.mask = mask;
      this.scale = SCALE;
      this.height = 12 / this.scale;
      this.width = 12 / this.scale;
      this.stopped = false;
      fixDef = new b2FixtureDef;
      fixDef.density = 1;
      fixDef.friction = 1;
      fixDef.restitution = 0;
      fixDef.filter.categoryBits = this.category;
      fixDef.filter.maskBits = this.mask;
      bodyDef = new b2BodyDef;
      bodyDef.type = b2Body.b2_dynamicBody;
      bodyDef.position.x = this.x / this.scale - 6 / this.scale;
      bodyDef.position.y = this.y / this.scale;
      fixDef.shape = new b2PolygonShape;
      fixDef.shape.SetAsBox(this.width, this.height);
      sensorDef = new b2FixtureDef;
      sensorDef.shape = new b2PolygonShape;
      sensorDef.shape.SetAsBox(this.seewidth / this.scale, this.seewidth / this.scale);
      sensorDef.isSensor = true;
      this.body = this.world.CreateBody(bodyDef);
      this.body.SetFixedRotation(true);
      fixDef = this.body.CreateFixture(fixDef);
      this.body.CreateFixture(sensorDef);
    }

    EntityModel.prototype.getScreenX = function() {
      return (this.body.GetPosition().x - this.width) * this.scale;
    };

    EntityModel.prototype.getScreenY = function() {
      return (this.body.GetPosition().y - this.height) * this.scale;
    };

    EntityModel.prototype.tick = function() {
      if (this.stopped === false) {
        return this.body.SetPosition(new b2Vec2(this.body.GetPosition().x + (this.speed / 30), this.body.GetPosition().y));
      }
    };

    EntityModel.prototype.wakeUp = function() {
      return this.body.SetAwake(true);
    };

    return EntityModel;

  })(Model);

  Storage = (function() {

    function Storage() {
      this.callback = __bind(this.callback, this);
      console.log("CREATE  Storage");
      this.store = new Array();
      this.counter = 0;
      this.finshed = function() {};
    }

    Storage.prototype.register = function() {
      var l, loader, _i, _j, _len, _len1, _results;
      loader = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.counter = loader.length;
      for (_i = 0, _len = loader.length; _i < _len; _i++) {
        l = loader[_i];
        l.setCallback(this.callback);
      }
      _results = [];
      for (_j = 0, _len1 = loader.length; _j < _len1; _j++) {
        l = loader[_j];
        _results.push(l.start());
      }
      return _results;
    };

    Storage.prototype.callback = function(loader) {
      --this.counter;
      this.store[loader.getName()] = loader.getRessource();
      if (this.counter === 0) {
        return this.finshed();
      }
    };

    Storage.prototype.setOnFinish = function(finished) {
      return this.finshed = finished;
    };

    Storage.prototype.getRessource = function(name) {
      return this.store[name];
    };

    return Storage;

  })();

  Loader = (function() {

    function Loader(path, name) {
      this.path = path;
      this.name = name;
      this.res = null;
      this.callback = function() {};
    }

    Loader.prototype.start = function() {};

    Loader.prototype.setCallback = function(callback) {
      return this.callback = callback;
    };

    Loader.prototype.getRessource = function() {
      return this.res;
    };

    Loader.prototype.getName = function() {
      return this.name;
    };

    return Loader;

  })();

  SimpleImageLoader = (function(_super) {

    __extends(SimpleImageLoader, _super);

    function SimpleImageLoader(path, name) {
      this.path = path;
      this.name = name;
      SimpleImageLoader.__super__.constructor.call(this, this.path, this.name);
      console.log("CREATE SimpleImageLoader");
    }

    SimpleImageLoader.prototype.start = function() {
      this.res = new Image();
      this.res.onLoad = this.load();
      return this.res.src = this.path;
    };

    SimpleImageLoader.prototype.load = function() {
      console.log("SimpleImageLoader Loaded");
      return this.callback(this);
    };

    return SimpleImageLoader;

  })(Loader);

  SimpleJSONLoader = (function(_super) {

    __extends(SimpleJSONLoader, _super);

    function SimpleJSONLoader(path, name) {
      this.path = path;
      this.name = name;
      this.load = __bind(this.load, this);

      SimpleJSONLoader.__super__.constructor.call(this, this.path, this.name);
      console.log("CREATE SimpleJSONLoader");
    }

    SimpleJSONLoader.prototype.start = function() {
      return $.getJSON(this.path, this.load);
    };

    SimpleJSONLoader.prototype.load = function(data) {
      console.log("JSON Loaded");
      this.res = data;
      return this.callback(this);
    };

    return SimpleJSONLoader;

  })(Loader);

  CODE = {
    LEFT: 37,
    RIGHT: 39,
    ENTER: 13,
    ESC: 27
  };

  Key = (function() {

    function Key() {
      this.pressed;
    }

    Key.prototype.toggle = function(pressed) {
      return this.pressed = pressed;
    };

    Key.prototype.isPressed = function() {
      return this.pressed;
    };

    return Key;

  })();

  InputHandler = (function() {

    function InputHandler() {
      this.keyUp = __bind(this.keyUp, this);

      this.keyDown = __bind(this.keyDown, this);
      this.LEFT = new Key();
      this.RIGHT = new Key();
      this.ENTER = new Key();
      this.ESC = new Key();
      window.addEventListener("keydown", this.keyDown);
      window.addEventListener("keyup", this.keyUp);
    }

    InputHandler.prototype.keyDown = function(e) {
      var keycode;
      keycode = e.keyCode;
      if (keycode === CODE.LEFT) {
        this.LEFT.toggle(true);
        e.preventDefault();
      }
      if (keycode === CODE.RIGHT) {
        this.RIGHT.toggle(true);
        e.preventDefault();
      }
      if (keycode === CODE.ENTER) {
        this.ENTER.toggle(true);
        e.preventDefault();
      }
      if (keycode === CODE.ESC) {
        this.ESC.toggle(true);
        return e.preventDefault();
      }
    };

    InputHandler.prototype.keyUp = function(e) {
      var keycode;
      keycode = e.keyCode;
      if (keycode === CODE.LEFT) {
        this.LEFT.toggle(false);
      }
      if (keycode === CODE.RIGHT) {
        this.RIGHT.toggle(false);
      }
      if (keycode === CODE.ENTER) {
        this.ENTER.toggle(false);
      }
      if (keycode === CODE.ESC) {
        return this.ESC.toggle(false);
      }
    };

    return InputHandler;

  })();

  window.requestAnimFrame = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
      return window.setTimeout(callback, 1000 / 60);
    };
  })();

  List = (function() {

    function List() {
      this.addindex = 0;
      this.array = new Array();
    }

    List.prototype.add = function(object) {
      return this.array[this.addindex++] = object;
    };

    List.prototype.size = function() {
      return this.array.length;
    };

    List.prototype.get = function(index) {
      return this.array[index];
    };

    List.prototype.del = function(index) {
      --this.addindex;
      return this.array.splice(index, 1);
    };

    return List;

  })();

  Screen = (function() {

    function Screen(id, img) {
      this.id = id;
      this.context = document.getElementById(this.id).getContext("2d");
      this.canvas = document.createElement("canvas");
      this.canvas.width = 640 / 3;
      this.canvas.height = 480 / 3;
      this.ctx = this.canvas.getContext("2d");
      this.spritesheet = new SpriteSheet(img, 8);
    }

    Screen.prototype.render = function(x, y, tile) {
      return this.spritesheet.drawTile(this.ctx, x / 3, y / 3, tile);
    };

    Screen.prototype.draw = function() {
      return this.context.drawImage(this.canvas, 0, 0, 640, 480);
    };

    Screen.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, 640, 480);
    };

    return Screen;

  })();

  MapGenerator = (function() {

    function MapGenerator(data, img) {
      this.data = data;
      this.img = img;
      console.log("INIT MapGenerator");
      this.spritesheet = new SpriteSheet(this.img, 8);
      this.load();
    }

    MapGenerator.prototype.load = function() {
      var layer, props, tiles, x, y, _i, _ref, _results;
      layer = this.data.layers[0];
      props = layer.properties;
      this.background = document.createElement("canvas");
      this.background.width = this.data.width * 8;
      this.background.height = this.data.height * 8;
      this.ctx = this.background.getContext("2d");
      tiles = layer.data;
      _results = [];
      for (y = _i = 0, _ref = 15 - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = 20 - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.spritesheet.drawTile(this.ctx, x * 8, y * 8, tiles[x + y * this.data.width] - 1));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return MapGenerator;

  })();

  LevelGenerator = (function() {

    function LevelGenerator(data, img, world) {
      this.data = data;
      this.img = img;
      this.world = world;
      this.sprites = new SpriteSheet(this.img, 8);
      this.bodies = new List();
      this.load();
    }

    LevelGenerator.prototype.load = function() {
      var i, name, _i, _ref, _results;
      this.background = document.createElement("canvas");
      this.ctx = this.background.getContext("2d");
      _results = [];
      for (i = _i = 0, _ref = this.data.layers.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        name = this.data.layers[i].name;
        if (name === 'scene') {
          this.createScene(this.data, this.data.layers[i]);
        }
        if (name === 'static') {
          this.createModel(this.world, this.data.layers[i]);
        }
        if (name === 'sensors') {
          _results.push(this.createModel(this.world, this.data.layers[i]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    LevelGenerator.prototype.createScene = function(data, layer) {
      var tileheight, tiles, tilewidth, x, y, _i, _ref, _results;
      tiles = layer.data;
      tileheight = data.tileheight;
      tilewidth = data.tilewidth;
      this.background.width = data.width * tilewidth;
      this.background.height = data.height * tileheight;
      _results = [];
      for (y = _i = 0, _ref = data.height - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (x = _j = 0, _ref1 = data.width - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.sprites.drawTile(this.ctx, x * 8, y * 8, tiles[x + y * data.width] - 1));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    LevelGenerator.prototype.createModel = function(world, layer) {
      var body, bodyDef, fixDef, i, obj, objects, p, ratio, scaleh, scalew, shape, type, x, _i, _j, _ref, _ref1, _results;
      objects = layer.objects;
      ratio = 8 * 16;
      scalew = 640 / ratio;
      scaleh = 480 / ratio;
      _results = [];
      for (i = _i = 0, _ref = objects.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        obj = objects[i];
        console.log(obj);
        b2PolygonShape(shape = new b2PolygonShape);
        for (x = _j = 0, _ref1 = obj.polygon.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          obj.polygon[x] = {
            x: obj.polygon[x].x / 30 * scalew,
            y: obj.polygon[x].y / 30 * scaleh
          };
        }
        shape.SetAsArray(obj.polygon);
        fixDef = new b2FixtureDef;
        if (obj.properties != null) {
          p = obj.properties;
          if (p.density != null) {
            fixDef.density = p.density;
          } else {
            fixDef.density = 1;
          }
          if (p.friction != null) {
            fixDef.friction = p.friction;
          } else {
            fixDef.friction = 1;
          }
          if (p.restitution != null) {
            fixDef.restitution = p.restitution;
            console.log(p.restitution);
          } else {
            fixDef.restitution = 0;
          }
          if (p.sensor != null) {
            fixDef.isSensor = p.sensor;
          }
        }
        fixDef.shape = shape;
        bodyDef = new b2BodyDef;
        if (obj.name === 'tower') {
          fixDef.filter.categoryBits = 0x08;
          fixDef.filter.maskBits = 0x01;
        }
        type = 0;
        if ((obj.type != null) && obj.type === 'static') {
          type = b2Body.b2_staticBody;
        } else {
          type = b2Body.b2_dynamicBody;
        }
        bodyDef.type = type;
        bodyDef.position.x = obj.x / 30 * scalew;
        bodyDef.position.y = obj.y / 30 * scaleh;
        this.bodies.add({
          bd: bodyDef,
          fd: fixDef
        });
        body = this.world.CreateBody(bodyDef);
        if (obj.properties.userdata != null) {
          body.UserData = obj.properties.userdata;
        }
        _results.push(body.CreateFixture(fixDef));
      }
      return _results;
    };

    return LevelGenerator;

  })();

  TowerGenerator = (function() {

    function TowerGenerator(json) {
      this.json = json;
      this.sprites = new SpriteSheet(STORAGE.getRessource("spritesheet"), 8);
      this.bodies = new List();
      this.load();
    }

    TowerGenerator.prototype.load = function() {
      var ctx, data, img, tiles, x, y, _i, _j, _ref, _ref1;
      console.log(this.json);
      img = document.createElement("canvas");
      img.width = this.json.width * this.json.tilewidth;
      img.height = this.json.height * this.json.tileheight;
      ctx = img.getContext("2d");
      data = this.json.layers[0];
      tiles = data.data;
      for (y = _i = 0, _ref = data.height; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        for (x = _j = 0, _ref1 = data.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          this.sprites.drawTile(ctx, x * 8, y * 8, tiles[x + y * data.width] - 1);
        }
      }
      this.img = document.createElement("canvas");
      this.img.width = this.json.width * this.json.tilewidth * 4;
      this.img.height = this.json.height * this.json.tileheight * 4;
      ctx = this.img.getContext('2d');
      ctx.webkitImageSmoothingEnabled = false;
      return ctx.drawImage(img, 0, 0, this.json.width * this.json.tilewidth * 4, this.json.height * this.json.tileheight * 4);
    };

    TowerGenerator.prototype.getTowerModel = function() {
      return this.img;
    };

    return TowerGenerator;

  })();

  Camera = (function() {

    function Camera(world, scale, screenscale, inputHandler) {
      this.world = world;
      this.scale = scale;
      this.screenscale = screenscale;
      this.inputHandler = inputHandler;
      this.tick = __bind(this.tick, this);

      this.active = false;
      this.xOffset = 0;
      this.modelScale = this.scale / this.screenscale;
      this.xBound = 128;
    }

    Camera.prototype.getXoffset = function() {
      return this.xOffset;
    };

    Camera.prototype.setXoffset = function(xOffset) {
      this.processEntities(xOffset);
      return this.xOffset = xOffset;
    };

    Camera.prototype.setXboundary = function(xbound) {
      return this.xBound = xbound;
    };

    Camera.prototype.setWorld = function(world) {
      this.world = world;
    };

    Camera.prototype.tick = function() {
      var body, xNow, _results;
      xNow = 0;
      if (this.inputHandler.RIGHT.isPressed() === true && this.active) {
        if (this.xOffset !== this.xBound) {
          xNow = 1;
        }
      }
      if (this.inputHandler.LEFT.isPressed() === true && this.active) {
        if (this.xOffset !== 0) {
          xNow = -1;
        }
      }
      if (xNow !== 0) {
        this.xOffset += xNow;
        body = this.world.GetBodyList();
        this.setBodyPosition(body, xNow, 0);
        _results = [];
        while ((body = body.GetNext()) !== null) {
          _results.push(this.setBodyPosition(body, xNow, 0));
        }
        return _results;
      }
    };

    Camera.prototype.setBodyPosition = function(body, xOffset, yOffset) {
      var newx, newy;
      newx = body.GetPosition().x - (xOffset / this.modelScale);
      newy = body.GetPosition().y - (yOffset / this.modelScale);
      return body.SetPosition(new b2Vec2(newx, newy), 0);
    };

    Camera.prototype.isActive = function() {
      return this.active;
    };

    Camera.prototype.setActive = function(active) {
      this.active = active;
    };

    Camera.prototype.setWorld = function(world) {
      this.world = world;
    };

    return Camera;

  })();

  SpriteSheet = (function() {

    function SpriteSheet(image, tilesize) {
      this.image = image;
      this.tilesize = tilesize;
      console.log("CREATED SpriteSheet");
    }

    SpriteSheet.prototype.drawTile = function(ctx, posx, posy, index) {
      var x, y, _i, _results;
      _results = [];
      for (y = _i = 0; _i <= 7; y = ++_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (x = _j = 0; _j <= 7; x = ++_j) {
            if ((x + y * this.tilesize) === index) {
              _results1.push(ctx.drawImage(this.image, x * this.tilesize, y * this.tilesize, this.tilesize, this.tilesize, posx, posy, this.tilesize, this.tilesize));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return SpriteSheet;

  })();

}).call(this);
