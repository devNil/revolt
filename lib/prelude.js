// Generated by CoffeeScript 1.4.0
//Prelude beta build
var ImageLoader, JSONLoader, Prelude,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Prelude = (function() {

  function Prelude() {
    this.registeredloaders = new Array();
  }

  Prelude.prototype.add = function(loader) {
    return this.registeredloaders[this.registeredloaders.length] = loader;
  };

  Prelude.prototype.start = function() {
    var loader, _i, _len, _ref, _results;
    this.size = this.registeredloaders.length;
    if (!this.task) {
      console.log("no completition task is setted");
    }
    _ref = this.registeredloaders;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      loader = _ref[_i];
      _results.push(loader.load(this));
    }
    return _results;
  };

  Prelude.prototype.finished = function() {
    if (--this.size === 0) {
      return this.task();
    }
  };

  Prelude.prototype.setOnCompletionTask = function(task) {
    this.task = task;
  };

  Prelude.prototype.getUrl = function() {
    return this.url;
  };

  return Prelude;

})();

JSONLoader = (function() {

  function JSONLoader(url) {
    var fin, swap,
      _this = this;
    this.url = url;
    this.load = __bind(this.load, this);

    this.req = new XMLHttpRequest();
    this.json = {};
    swap = function(json) {
      return this.json = json;
    };
    fin = function() {
      if (_this.req.readyState === 4) {
        swap(JSON.parse(_this.req.responseText));
        return _this.prelude.finished();
      }
    };
    this.req.onreadystatechange = fin;
  }

  JSONLoader.prototype.load = function(prelude) {
    this.prelude = prelude;
    this.req.open("GET", this.url, true);
    this.req.send(null);
    return this;
  };

  return JSONLoader;

})();

Prelude.prototype.addJSON = function(url) {
  var json;
  json = new JSONLoader(url);
  this.add(json);
  return json.json;
};

ImageLoader = (function() {

  function ImageLoader(url) {
    var fin,
      _this = this;
    this.url = url;
    this.load = __bind(this.load, this);

    this.img = new Image();
    fin = function() {
      return _this.prelude.finished();
    };
    this.img.onload = fin;
  }

  ImageLoader.prototype.load = function(prelude) {
    this.prelude = prelude;
    return this.img.src = this.url;
  };

  return ImageLoader;

})();

Prelude.prototype.addImage = function(url) {
  var image;
  image = new ImageLoader(url);
  this.add(image);
  return image.img;
};
